#!/usr/bin/env php
<?php
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Markus Fischer <markus@fischer.name>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
require_once __DIR__ . '/../bootstrap.php';
use Mfn\CakePHP2\MagicProperty\ClassTransformer;
use Mfn\CakePHP2\MagicProperty\ClassVisitor;
use Mfn\CakePHP2\MagicProperty\PropertyVisitor;
use PhpParser\Lexer;
use PhpParser\NodeTraverser;
use PhpParser\Parser;
use Ulrichsg\Getopt\Getopt;
use Ulrichsg\Getopt\Option;

ini_set('memory_limit', -1);
# minimal error2exception handler
set_error_handler(function ($errno, $errstr, $errfile, $errline, $errcontext) {
  $msg = "$errstr in $errfile line $errline";
  throw new \RuntimeException($msg, $errno);
});
# Setup getopt
$opts = new Getopt([
  (new Option('h', 'help'))
    ->setDescription('Show this help'),
  (new Option('n', 'dry-run'))
    ->setDescription('Run without actually modifying files'),
  (new Option('q', 'quiet'))
    ->setDescription('No verbose output'),
  (new Option('r', 'remove'))
    ->setDescription('Remove non-existent properties. Warning: this removes all unknown properties!')
]);
$opts->setBanner(
  "Scans a CakePHP2 project and adds magic PHPDOC @property\n" .
  "documentation for \$components, \$helpers and \$uses\n\n" .
  "Usage: %s [options] <directories|files>\n"
);
$usage = function ($err = NULL) use ($opts) {
  if (!empty($err)) {
    echo 'Error: ', $err, PHP_EOL, PHP_EOL;
  }
  echo $opts->getHelpText();
  exit(1);
};
try {
  $opts->parse();
  if ($opts['help']) {
    $usage();
  }
} catch (\UnexpectedValueException $e) {
  $usage($e->getMessage());
}
$removeProperties = (bool) $opts['remove'];
$operands = $opts->getOperands();
if (count($operands) === 0) {
  $usage('You must provide at least a file/directory to scan');
}
$fnScanDir = function ($dir) {
  $files = [];
  $iter = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));
  /** @var $file SplFileInfo */
  foreach ($iter as $file) {
    if (!$file->isFile()) {
      continue;
    }
    if ($file->getExtension() !== 'php') {
      continue;
    }
    $files[] = $file->getRealPath();
  };
  return $files;
};
$files = [];
foreach ($operands as $operand) {
  if (is_file($operand)) {
    $files[] = $operand;
    continue;
  }
  if (is_dir($operand)) {
    $files = array_merge($files, $fnScanDir($operand));
  }
}
$files = array_unique($files);
# start processing
$traverser = new NodeTraverser();
$classVisitor = new ClassVisitor();
$traverser->addVisitor($classVisitor);
# Store which class is in which file and whose parent it has, if
$classes = [];
foreach ($files as $file) {
  if (!$opts['quiet']) {
    echo "Parsing $file ..." . PHP_EOL;
  }
  $code = file($file);
  $parser = new Parser(new Lexer());
  $tree = $parser->parse(join('', $code));
  $traverser->traverse($tree);
  $classesInFile = $classVisitor->getClasses();
  foreach ($classesInFile as $class) {
    if (!isset($class->extends)) {
      continue;
    }
    if (isset($classes[$class->name])) {
      if (!$opts['quiet']) {
        fprintf(STDERR,
          sprintf('Ignoring class definition of %s found in file %s:%d, first'
            . ' found in %s:%d' . PHP_EOL,
            $class->name,
            $file,
            $class->getAttribute('startLine'),
            $classes[$class->name]['file'],
            $classes[$class->name]['class']->getAttribute('startLine')
          )
        );
      }
      continue;
    }
    # Remember for next pass
    $classes[$class->name] = [
      'class' => $class,
      'file'  => $file,
      'code'  => $code,
    ];
  }
}
$traverser->removeVisitor($classVisitor);
$propertyVisitor = new PropertyVisitor();
$traverser->addVisitor($propertyVisitor);
if (empty($classes)) {
  echo 'No classes found' . PHP_EOL;
  exit(1);
}
$fnFindTopAncestor = function ($className) use ($classes) {
  while (isset($classes[$className])) {
    $className = $classes[$className]['class']->extends->toString();
  }
  return $className;
};
foreach ($classes as $className => $classData) {
  $fileName = $classData['file'];
  $transformedSource = NULL;
  switch ($fnFindTopAncestor($className)) {
    case 'Controller':
      $propertyVisitor->reset();
      $traverser->traverse([$classData['class']]);
      $transformedSource = ClassTransformer::apply(
        $classData['code'],
        $propertyVisitor->getClasses(),
        ['components', 'uses'],
        $removeProperties
      );
      break;
    case 'Helper':
      $propertyVisitor->reset();
      $traverser->traverse([$classData['class']]);
      $transformedSource = ClassTransformer::apply(
        $classData['code'],
        $propertyVisitor->getClasses(),
        [],
        $removeProperties
      );
      break;
    case 'Shell':
      $propertyVisitor->reset();
      $traverser->traverse([$classData['class']]);
      $transformedSource = ClassTransformer::apply(
        $classData['code'],
        $propertyVisitor->getClasses(),
        ['uses'],
        $removeProperties
      );
      break;
    case 'Model':
      $propertyVisitor->reset();
      $traverser->traverse([$classData['class']]);
      $transformedSource = ClassTransformer::apply(
        $classData['code'],
        $propertyVisitor->getClasses(),
        ['belongsTo', 'hasOne', 'hasMany', 'hasAndBelongsToMany'],
        $removeProperties
      );
      break;
    default:
      # ignored
      if (!$opts['quiet']) {
        echo "Ignoring $fileName , not a recognized class" . PHP_EOL;
      }
      goto nextIteration;
  }
  if ($classData['code'] === $transformedSource) {
    continue;
  }
  if ($opts['dry-run']) {
    if (!$opts['quiet']) {
      echo 'Dry-run, not writing changes to ' . $fileName . PHP_EOL;
    }
    continue;
  }
  if (!$opts['quiet']) {
    echo 'Writing changes to ' . $fileName . PHP_EOL;
  }
  file_put_contents($fileName, $transformedSource);
  nextIteration:
}
